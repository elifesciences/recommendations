#!/usr/bin/env bash
environment=$1

if [ -z "$environment" ]; then
    echo "environment needs to be passed as first argument";
    exit 2;
fi;

expected_rules=25
expected_most_recent=7

# propagate SIGINT to waiting process
trap 'kill -INT -$waitingPid' INT

## TODO
#./bin/console queue:clean --env="$environment"
# TODO: poll for queue:count == 0, with timeout
#sleep 5

echo "Starting a queue:watch"
./bin/console queue:watch --env="$environment" >> /tmp/queue-watch.log 2>&1 &
queueWatchPid=$!
echo "queue:watch PID $queueWatchPid"

echo "Starting import"
./bin/console api:import all --env="$environment"
echo "Finished launching import"

# will return also on failing conditions such as dead processes
timeout 60 ./bin/wait-for-empty-queue "$environment" &
waitingPid=$!
wait "$waitingPid"
waitingReturnCode=$?
# clean up PHP processes
kill "$queueWatchPid";
if [ ! "$waitingReturnCode" -eq "0" ]; then
    echo -e "\e[31mThe script './wait-for-empty-queue' timed out or failed\e[39m"
    exit "$waitingReturnCode"
fi

query_count () {
    php bin/console query:count "$1" --env="$environment"
}

# final verifications
## total rules
total_rules=$(query_count easy-read-rules)
echo "Total rules in the index (easy-read-rules): $total_rules"
if [ "$total_rules" -eq "$expected_rules" ]; then
    echo "✔ Correct number of rules in the index"
else
    echo "✘ There should be exactly $expected_rules in the database"
    exit 2
fi

most_recent=$(query_count latest-articles)
echo "Total latest articles to use in MostRecent (latest-articles): $most_recent"
if [ "$most_recent" -eq "$expected_most_recent" ]; then
    echo "✔ Correct number of rules for MostRecent"
else
    echo "✘ There should be exactly $expected_most_recent for MostRecent to use. Run bin/queries/latest-articles to check"
    exit 3
fi

